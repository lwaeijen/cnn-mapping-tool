
        //////////////////////////////////////////////////
        // Start Pooling Layer {{name}}
        {%- set vars = "n,m,i,o" %};
        {%- set input_name = list(network.predecessors(layer_name))[0] -%}
        {%- set input_layer = network.nodes[input_name] %}
        {%- set halide_input_name = segment.halide_name(input_name)+('_buf' if input_name in segment.inputs else '')  %}
        {%- set prev_name = halide_input_name %}

        {%- if layer.batchnorm -%}
        //read batchnorm mean from file
        {%- set arr_bnmean="Arr_BatchNormMean_"+name %}
        {%- set buf_bnmean="BatchNormMean_"+name %}
        {%- set num_bnmean =  layer.zo %}
        {%- set fp_bnmean = 'fin_'+name+'_batchnorm_mean'  %}
        float {{arr_bnmean}}[{{num_bnmean}}];
        std::ifstream {{fp_bnmean}}("{{params[layer_name]['batchnorm_mean']}}", std::ios::binary);
        {{fp_bnmean}}.read(reinterpret_cast<char*>({{arr_bnmean}}), {{num_bnmean}}*sizeof(float));
        {{fp_bnmean}}.close();
        Buffer<float> {{buf_bnmean}}({{arr_bnmean}}, {{num_bnmean}});

        //read batchnorm variance from file
        {%- set arr_bnvar="Arr_BatchNormVariance_"+name %}
        {%- set buf_bnvar="BatchNormVariance_"+name %}
        {%- set num_bnvar =  layer.zo %}
        {%- set fp_bnvar = 'fin_'+name+'_batchnorm_variance'  %}
        float {{arr_bnvar}}[{{num_bnvar}}];
        std::ifstream {{fp_bnvar}}("{{params[layer_name]['batchnorm_var']}}", std::ios::binary);
        {{fp_bnvar}}.read(reinterpret_cast<char*>({{arr_bnvar}}), {{num_bnvar}}*sizeof(float));
        {{fp_bnvar}}.close();
        Buffer<float> {{buf_bnvar}}({{arr_bnvar}}, {{num_bnvar}});
        {%- endif %}

        {% if layer.scale -%}
        //read scale values from file
        {%- set arr_scale= "Arr_Scale_"+name %}
        {%- set buf_scale= "Scale_"+name %}
        {%- set num_scale=  layer.zo %}
        {%- set fp_scale = 'fin_'+name+'_scale'  %}
        float {{arr_scale}}[{{num_scale}}];
        std::ifstream {{fp_scale}}("{{params[layer_name]['scale']}}", std::ios::binary);
        {{fp_scale}}.read(reinterpret_cast<char*>({{arr_scale}}), {{num_scale}}*sizeof(float));
        {{fp_scale}}.close();
        Buffer<float> {{buf_scale}}({{arr_scale}}, {{num_scale}});

        {% if layer.scale.bias -%}
        //read scale bias values from file
        {%- set arr_scale_bias="Arr_Scale_Bias"+name %}
        {%- set buf_scale_bias="Scale_Bias"+name %}
        {%- set num_scale_bias =  layer.zo %}
        {%- set fp_scale_bias = 'fin_'+name+'_scale_bias'  %}
        float {{arr_scale_bias}}[{{num_scale_bias}}];
        std::ifstream {{fp_scale_bias}}("{{params[layer_name]['scale_bias']}}", std::ios::binary);
        {{fp_scale_bias}}.read(reinterpret_cast<char*>({{arr_scale_bias}}), {{num_scale_bias}}*sizeof(float));
        {{fp_scale_bias}}.close();
        Buffer<float> {{buf_scale_bias}}({{arr_scale_bias}}, {{num_scale_bias}});
        {%- endif %}
        {%- endif %}

        //Always add padding since pooling might read out of bounds thanks to strange definition of output size by caffe
        {%- set fpad="bounded_s"+str(segment.id)+"_"+halide_input_name %}
        Func {{fpad}}("{{fpad}}");
        {{fpad}} = BoundaryConditions::constant_exterior({{prev_name}},0,0,{{input_layer.xo}},0,{{input_layer.yo}},0,{{input_layer.zo}});
        {%- set prev_name=fpad %}

        //pooling
        {%- set K=layer['pooling']['kernel_size'] %}
        {%- set S=layer['pooling']['stride'] %}
        {%- set rp="r_"+name %}
        RDom {{rp}}(0,{{K}},0,{{K}});
        {% if layer.pooling.type == 'max'%}
        {{name}}({{vars3}})=maximum({{prev_name}}(n*{{S}}+{{rp}}.x, m*{{S}}+{{rp}}.y, o));
        {% elif layer.pooling.type == 'ave' %}
        {{name}}({{vars3}})=sum({{prev_name}}(n*{{S}}+{{rp}}.x, m*{{S}}+{{rp}}.y, o))/{{"%ff"%(float(K*K))}};
        {% else %}
        {{ "ERROR: Unrecognized pooling type"/0 }}
        {% endif %}

        {% if layer.batchnorm %}
        {%- set eps = "%ff"%(float(layer.batchnorm_eps)) if layer.batchnorm_eps else "FLT_EPSILON" %}
        //Batch normalisation
        {{name}}({{vars3}})= ({{name}}({{vars3}})-{{buf_bnmean}}(o))/sqrt({{buf_bnvar}}(o)+ {{eps}} );
        {%- endif %}

        {% if layer.scale %}
        //Scaling
        {{name}}({{vars3}})={{name}}({{vars3}})*{{buf_scale}}(o) {% if layer.scale.bias %} + {{buf_scale_bias}}(o) {% endif %};
        {%- endif %}

        {% if layer.relu %}
        //ReLu
        {{name}}({{vars3}}) = (max(0.0f, {{name}}({{vars3}}) ));
        {%- endif -%}

        {% if layer.sigmoid %}
        //Sigmoid function
        {{name}}({{vars3}}) = 1.f/(1.f+exp(-1.f*{{name}}({{vars3}})));
        {%- endif -%}

        // End Pooling Layer {{name}}
        //////////////////////////////////////////////////
