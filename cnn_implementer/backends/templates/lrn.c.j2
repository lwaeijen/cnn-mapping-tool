
        //////////////////////////////////////////////////
        // Start Local Response Normalisation Layer {{name}}
        {%- set vars = "n,m,i,o" %};
        {%- set input_name = list(network.predecessors(layer_name))[0] -%}
        {%- set input_layer = network.nodes[input_name] %}
        {%- set halide_input_name = segment.halide_name(input_name)+('_buf' if input_name in segment.inputs else '')  %}
        {%- set prev_name = halide_input_name %}

        //Always add padding since lrn will read out of bounds in the o-dimension
        {%- set fpad="bounded_s"+str(segment.id)+"_"+halide_input_name %}
        Func {{fpad}}("{{fpad}}");
        {{fpad}} = BoundaryConditions::constant_exterior({{prev_name}},0,0,{{input_layer.xo}},0,{{input_layer.yo}},0,{{input_layer.zo}});
        {%- set prev_name=fpad %}

        //local response normalisation
        {%- set lrn_name = name+'_lrn' %}
        {%- set alpha    = layer.alpha %}
        {%- set beta     = layer.beta %}
        {%- set K        = layer.K %}
        {%- set r        = 'r_'+name %}
        Func {{lrn_name}}("{{lrn_name}}");
        RDom {{r}}({{ -1*int(floor((float(K)/2.0)))}},{{K}});
        {{lrn_name}}({{vars3}})= {{prev_name}}({{vars3}})/ pow(1.0f + ({{alpha}}f/{{int(K)}}.f) * sum(pow({{prev_name}}(n,m,o+{{r}}.x),2)), {{beta}}f);
        {%- set prev_name = lrn_name %}

        //renaming to layer output name (lazy code generation artifact)
        {{name}}({{vars3}})={{prev_name}}({{vars3}});

        // End Local Response Normalisation Layer {{name}}
        //////////////////////////////////////////////////
